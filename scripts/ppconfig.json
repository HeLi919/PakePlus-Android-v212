{"message":"Not Found","documentation_url":"https://docs.github.com/rest/git/refs#get-all-references-in-a-namespace","status":"404","name":"fbbaecaaddfbad","url":"https://epay.hnuu.edu.cn/member/wxIndex","showName":"随行校园","appid":"com.sxxy.buf","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":false,"version":"0.4.0","preview":"desktop","platform":["1-1"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"// 密码管理器 - 自动保存和自动填充\nclass PasswordManager {\n    constructor() {\n        this.storageKey = 'autoSavedPasswords';\n        this.isEnabled = true;\n        this.currentDomain = window.location.hostname;\n        this.init();\n    }\n    \n    init() {\n        console.log('密码管理器已初始化');\n        this.autoFillOnLoad();\n        this.setupFormMonitoring();\n        this.setupNavigationMonitor();\n    }\n    \n    // 加密存储（简单的base64编码）\n    encrypt(text) {\n        return btoa(unescape(encodeURIComponent(text)));\n    }\n    \n    decrypt(encrypted) {\n        try {\n            return decodeURIComponent(escape(atob(encrypted)));\n        } catch {\n            return null;\n        }\n    }\n    \n    // 保存账号密码\n    saveCredentials(username, password, website = null) {\n        if (!this.isEnabled) return;\n        \n        const websiteKey = website || this.currentDomain;\n        const credentials = {\n            username: this.encrypt(username),\n            password: this.encrypt(password),\n            domain: websiteKey,\n            timestamp: Date.now()\n        };\n        \n        // 获取现有保存的密码\n        const allCredentials = this.getAllCredentials();\n        allCredentials[websiteKey] = credentials;\n        \n        try {\n            localStorage.setItem(this.storageKey, JSON.stringify(allCredentials));\n            console.log('账号密码已保存:', websiteKey);\n            this.showNotification('✓ 密码已保存');\n        } catch (e) {\n            console.error('保存密码失败:', e);\n        }\n    }\n    \n    // 获取所有保存的凭据\n    getAllCredentials() {\n        try {\n            const data = localStorage.getItem(this.storageKey);\n            return data ? JSON.parse(data) : {};\n        } catch {\n            return {};\n        }\n    }\n    \n    // 获取当前网站的凭据\n    getCurrentCredentials() {\n        const allCredentials = this.getAllCredentials();\n        const credentials = allCredentials[this.currentDomain];\n        \n        if (!credentials) return null;\n        \n        // 检查是否过期（90天）\n        const isExpired = Date.now() - credentials.timestamp > 90 * 24 * 60 * 60 * 1000;\n        if (isExpired) {\n            this.clearCredentials(this.currentDomain);\n            return null;\n        }\n        \n        return {\n            username: this.decrypt(credentials.username),\n            password: this.decrypt(credentials.password)\n        };\n    }\n    \n    // 清除凭据\n    clearCredentials(website = null) {\n        const websiteKey = website || this.currentDomain;\n        const allCredentials = this.getAllCredentials();\n        delete allCredentials[websiteKey];\n        localStorage.setItem(this.storageKey, JSON.stringify(allCredentials));\n        console.log('已清除保存的密码:', websiteKey);\n    }\n    \n    // 页面加载时自动填充\n    autoFillOnLoad() {\n        if (!this.isEnabled) return;\n        \n        // 延迟执行，确保页面完全加载\n        setTimeout(() => {\n            const credentials = this.getCurrentCredentials();\n            if (credentials) {\n                const filled = this.fillLoginForm(credentials);\n                if (filled) {\n                    console.log('自动填充完成');\n                    this.showNotification('🔐 已自动填充账号密码');\n                }\n            }\n        }, 1000);\n    }\n    \n    // 填充登录表单\n    fillLoginForm(credentials) {\n        const forms = document.querySelectorAll('form');\n        let filled = false;\n        \n        for (let form of forms) {\n            const passwordField = this.findPasswordField(form);\n            if (!passwordField) continue;\n            \n            const usernameField = this.findUsernameField(form);\n            \n            if (usernameField && passwordField) {\n                // 只在字段为空时填充\n                if (!usernameField.value && !passwordField.value) {\n                    usernameField.value = credentials.username;\n                    passwordField.value = credentials.password;\n                    \n                    // 触发输入事件\n                    this.triggerInputEvents(usernameField);\n                    this.triggerInputEvents(passwordField);\n                    \n                    filled = true;\n                    \n                    // 自动提交（可选）\n                    this.autoSubmitForm(form);\n                    break;\n                }\n            }\n        }\n        \n        return filled;\n    }\n    \n    // 查找密码字段\n    findPasswordField(form) {\n        return form.querySelector('input[type=\"password\"]');\n    }\n    \n    // 查找用户名字段\n    findUsernameField(form) {\n        const selectors = [\n            'input[name=\"username\"]',\n            'input[name=\"user\"]',\n            'input[name=\"email\"]',\n            'input[name=\"account\"]',\n            'input[name=\"login\"]',\n            'input[type=\"text\"]',\n            'input[type=\"email\"]'\n        ];\n        \n        for (let selector of selectors) {\n            const field = form.querySelector(selector);\n            if (field && field.type !== 'hidden' && !field.disabled) {\n                return field;\n            }\n        }\n        return null;\n    }\n    \n    // 触发输入事件\n    triggerInputEvents(element) {\n        ['input', 'change', 'focus'].forEach(eventType => {\n            element.dispatchEvent(new Event(eventType, { bubbles: true }));\n        });\n    }\n    \n    // 自动提交表单（可选）\n    autoSubmitForm(form) {\n        // 查找提交按钮\n        const submitSelectors = [\n            'input[type=\"submit\"]',\n            'button[type=\"submit\"]',\n            'button:not([type])',\n            '[onclick*=\"submit\"]',\n            '[onclick*=\"login\"]'\n        ];\n        \n        for (let selector of submitSelectors) {\n            const submitBtn = form.querySelector(selector);\n            if (submitBtn) {\n                console.log('找到提交按钮，自动提交');\n                setTimeout(() => {\n                    submitBtn.click();\n                }, 500);\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    // 设置表单监控\n    setupFormMonitoring() {\n        // 监控表单提交\n        document.addEventListener('submit', (e) => {\n            this.handleFormSubmit(e);\n        }, true);\n        \n        // 监控密码输入\n        document.addEventListener('input', (e) => {\n            if (e.target.type === 'password') {\n                this.handlePasswordInput(e.target);\n            }\n        });\n    }\n    \n    // 处理表单提交\n    handleFormSubmit(e) {\n        const form = e.target;\n        const passwordField = this.findPasswordField(form);\n        \n        if (!passwordField || !passwordField.value) return;\n        \n        const usernameField = this.findUsernameField(form);\n        if (!usernameField || !usernameField.value) return;\n        \n        // 自动保存（不询问）\n        this.saveCredentials(usernameField.value, passwordField.value);\n    }\n    \n    // 处理密码输入\n    handlePasswordInput(passwordField) {\n        const form = passwordField.closest('form');\n        if (!form) return;\n        \n        const usernameField = this.findUsernameField(form);\n        if (usernameField && usernameField.value && passwordField.value) {\n            // 实时保存（可选，可能会频繁保存）\n            // this.saveCredentials(usernameField.value, passwordField.value);\n        }\n    }\n    \n    // 设置导航监控\n    setupNavigationMonitor() {\n        // 监听页面跳转\n        let currentUrl = window.location.href;\n        \n        setInterval(() => {\n            if (window.location.href !== currentUrl) {\n                currentUrl = window.location.href;\n                console.log('检测到页面跳转，重新尝试自动填充');\n                setTimeout(() => this.autoFillOnLoad(), 1500);\n            }\n        }, 1000);\n        \n        // 监听页面可见性变化（标签页切换）\n        document.addEventListener('visibilitychange', () => {\n            if (!document.hidden) {\n                setTimeout(() => this.autoFillOnLoad(), 500);\n            }\n        });\n    }\n    \n    // 显示通知\n    showNotification(message) {\n        // 移除现有通知\n        const existingNotice = document.querySelector('.password-manager-notice');\n        if (existingNotice) {\n            existingNotice.remove();\n        }\n        \n        const notice = document.createElement('div');\n        notice.className = 'password-manager-notice';\n        notice.textContent = message;\n        notice.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 4px;\n            z-index: 10000;\n            font-family: Arial, sans-serif;\n            font-size: 14px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n        `;\n        \n        document.body.appendChild(notice);\n        \n        setTimeout(() => {\n            if (document.body.contains(notice)) {\n                notice.remove();\n            }\n        }, 3000);\n    }\n    \n    // 添加管理界面\n    addControlPanel() {\n        const panel = document.createElement('div');\n        panel.style.cssText = `\n            position: fixed;\n            bottom: 10px;\n            right: 10px;\n            background: #333;\n            color: white;\n            padding: 10px;\n            border-radius: 5px;\n            z-index: 9999;\n            font-size: 12px;\n            font-family: Arial, sans-serif;\n        `;\n        \n        panel.innerHTML = `\n            <div>密码管理器</div>\n            <button onclick=\"passwordManager.toggle()\" style=\"margin:2px; padding:2px 5px;\">${this.isEnabled ? '禁用' : '启用'}</button>\n            <button onclick=\"passwordManager.clearCurrent()\" style=\"margin:2px; padding:2px 5px;\">清除</button>\n        `;\n        \n        document.body.appendChild(panel);\n    }\n    \n    // 切换启用状态\n    toggle() {\n        this.isEnabled = !this.isEnabled;\n        console.log('密码管理器:', this.isEnabled ? '已启用' : '已禁用');\n        this.showNotification(`密码管理器${this.isEnabled ? '已启用' : '已禁用'}`);\n        \n        if (this.isEnabled) {\n            this.autoFillOnLoad();\n        }\n    }\n    \n    // 清除当前网站密码\n    clearCurrent() {\n        this.clearCredentials();\n        this.showNotification('已清除保存的密码');\n    }\n}\n\n// 初始化密码管理器\nconst passwordManager = new PasswordManager();\n\n// 在页面完全加载后添加控制面板\nwindow.addEventListener('load', () => {\n    setTimeout(() => {\n        passwordManager.addControlPanel();\n    }, 2000);\n});\n\n// 暴露到全局，方便调试\nwindow.passwordManager = passwordManager;\n\nconsole.log('🔐 密码管理器已加载 - 自动保存和填充账号密码');","isHtml":false,"htmlPath":"","htmlFiles":[],"prefix":"","pcRepo":"PakePlus-v212","iosRepo":"PakePlus-iOS-v212","androidRepo":"PakePlus-Android-v212","more":{"windows":{"label":"fbbaecaaddfbad","title":"随行校园","url":"https://epay.hnuu.edu.cn/member/wxIndex","userAgent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","width":800,"height":600,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"shadow":true,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false,"backgroundColor":null,"backgroundThrottling":null,"javascriptDisabled":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"fbbaecaaddfbad","showName":"随行校园","version":"0.4.0","webUrl":"https://epay.hnuu.edu.cn/member/wxIndex","id":"com.sxxy.buf.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false,"safeArea":"all"},"android":{"name":"fbbaecaaddfbad","showName":"随行校园","version":"0.4.0","webUrl":"https://epay.hnuu.edu.cn/member/wxIndex","id":"com.sxxy.buf.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false,"safeArea":"all"},"desktop":{"name":"fbbaecaaddfbad","showName":"随行校园","version":"0.4.0","id":"com.sxxy.buf.desktop","desc":"打包仅限个人使用，请勿传播或商业用途，否则后果自负","webUrl":"https://epay.hnuu.edu.cn/member/wxIndex","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"打包仅限个人使用，请勿传播或商业用途，否则后果自负","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"buildMethod":"local","debug":false}}