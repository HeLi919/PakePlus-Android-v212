{"name":"eeadbbaeadadd","url":"https://epay.hnuu.edu.cn/member/wxIndex","showName":"随行校园","appid":"com.eeadbbaeadadd.app","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":true,"version":"0.3.0","preview":"Android","platform":["1-1","2-2"],"width":412,"height":915,"desc":"","jsFile":[],"filterCss":"","customJs":"// 链接处理 - 优化版本\nconst hookClick = (e) => {\n    const origin = e.target.closest('a');\n    \n    if (!origin || !origin.href) return;\n    \n    // 只在特定条件下处理\n    const shouldHandle = \n        origin.target === '_blank' || \n        document.querySelector('head base[target=\"_blank\"]');\n    \n    if (shouldHandle) {\n        // 检查是否是外部链接\n        const isExternal = !origin.href.startsWith(window.location.origin);\n        const isSamePage = origin.href.includes('#') && \n                          origin.href.replace(/#.*/, '') === window.location.href.replace(/#.*/, '');\n        \n        // 跳过页面内锚点链接\n        if (isSamePage) {\n            return;\n        }\n        \n        e.preventDefault();\n        e.stopPropagation();\n        \n        // 对于外部链接或需要特殊处理的链接\n        if (isExternal) {\n            // 添加确认对话框，避免意外跳转\n            if (confirm(`即将离开当前页面，访问: ${new URL(origin.href).hostname}\\n是否继续？`)) {\n                window.open(origin.href, '_blank', 'noopener,noreferrer');\n            }\n        } else {\n            // 内部链接直接在当前页面打开\n            location.href = origin.href;\n        }\n    }\n};\n\n// 密码管理 - 增强版本（包含自动重新登录功能）\nclass PasswordManager {\n    constructor() {\n        this.storageKey = 'encryptedCredentials';\n        this.isEnabled = false;\n        this.autoReloginEnabled = false;\n        this.reloginAttempts = 0;\n        this.maxReloginAttempts = 3;\n        this.init();\n    }\n    \n    init() {\n        // 检查功能是否启用\n        this.isEnabled = localStorage.getItem('passwordManagerEnabled') === 'true';\n        this.autoReloginEnabled = localStorage.getItem('autoReloginEnabled') === 'true';\n        \n        // 提供启用/禁用选项\n        if (!localStorage.getItem('passwordManagerEnabled')) {\n            this.showInitialPrompt();\n        }\n        \n        // 启动掉线检测\n        this.startSessionMonitoring();\n    }\n    \n    showInitialPrompt() {\n        const enable = confirm('是否启用密码自动保存功能？\\n\\n注意：密码将加密保存在本地浏览器中。');\n        localStorage.setItem('passwordManagerEnabled', enable.toString());\n        this.isEnabled = enable;\n        \n        if (enable) {\n            const enableRelogin = confirm('是否启用自动重新登录功能？\\n\\n当检测到登录状态失效时，会自动尝试重新登录。');\n            localStorage.setItem('autoReloginEnabled', enableRelogin.toString());\n            this.autoReloginEnabled = enableRelogin;\n        }\n    }\n    \n    // 改进的加密（虽然仍然不是绝对安全，但比base64好）\n    encrypt(text) {\n        // 添加简单的混淆\n        const timestamp = Date.now().toString();\n        const mixedText = text + '|' + timestamp + '|' + window.location.hostname;\n        return btoa(unescape(encodeURIComponent(mixedText)));\n    }\n    \n    decrypt(encrypted) {\n        try {\n            const decoded = decodeURIComponent(escape(atob(encrypted)));\n            // 提取原始文本（去掉时间戳和域名）\n            return decoded.split('|')[0];\n        } catch {\n            return null;\n        }\n    }\n    \n    saveCredentials(username, password) {\n        if (!this.isEnabled) return;\n        \n        const credentials = {\n            username: this.encrypt(username),\n            password: this.encrypt(password),\n            domain: window.location.hostname,\n            timestamp: Date.now(),\n            version: '1.0'\n        };\n        \n        const key = `${this.storageKey}_${window.location.hostname}`;\n        try {\n            localStorage.setItem(key, JSON.stringify(credentials));\n            this.showSaveNotification();\n        } catch (e) {\n            console.error('保存密码失败:', e);\n        }\n    }\n    \n    showSaveNotification() {\n        console.log('登录信息已安全保存');\n        \n        const notification = document.createElement('div');\n        notification.textContent = '✓ 密码已保存';\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 4px;\n            z-index: 10000;\n            font-family: Arial, sans-serif;\n        `;\n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            if (document.body.contains(notification)) {\n                document.body.removeChild(notification);\n            }\n        }, 3000);\n    }\n    \n    getCredentials() {\n        if (!this.isEnabled) return null;\n        \n        const key = `${this.storageKey}_${window.location.hostname}`;\n        const data = localStorage.getItem(key);\n        \n        if (!data) return null;\n        \n        try {\n            const credentials = JSON.parse(data);\n            \n            // 检查数据是否过期（30天）\n            const isExpired = Date.now() - credentials.timestamp > 30 * 24 * 60 * 60 * 1000;\n            if (isExpired) {\n                this.clearCredentials();\n                return null;\n            }\n            \n            return {\n                username: this.decrypt(credentials.username),\n                password: this.decrypt(credentials.password)\n            };\n        } catch {\n            this.clearCredentials();\n            return null;\n        }\n    }\n    \n    clearCredentials() {\n        const key = `${this.storageKey}_${window.location.hostname}`;\n        localStorage.removeItem(key);\n    }\n    \n    // 改进的自动填充检测\n    safeAutoFill() {\n        if (!this.isEnabled) return false;\n        \n        const credentials = this.getCredentials();\n        if (!credentials) return false;\n        \n        // 更准确的登录页面检测\n        const hasPasswordField = document.querySelector('input[type=\"password\"]');\n        const hasUsernameField = document.querySelector('input[type=\"text\"][name*=\"user\"], input[type=\"email\"][name*=\"user\"], input[name*=\"user\"], input[name*=\"email\"]');\n        \n        const isLikelyLoginPage = hasPasswordField && \n            (hasUsernameField || \n             document.querySelector('form[action*=\"login\"], form[id*=\"login\"]'));\n        \n        if (isLikelyLoginPage) {\n            // 延迟填充，确保页面完全加载\n            setTimeout(() => {\n                this.fillForm(credentials);\n            }, 500);\n            return true;\n        }\n        return false;\n    }\n    \n    fillForm(credentials) {\n        const forms = document.querySelectorAll('form');\n        let filled = false;\n        \n        for (let form of forms) {\n            const passwordField = form.querySelector('input[type=\"password\"]');\n            if (!passwordField) continue;\n            \n            // 改进的用户名字段查找\n            let usernameField = this.findUsernameField(form);\n            \n            if (usernameField && passwordField) {\n                // 检查字段是否已经填充\n                if (!usernameField.value && !passwordField.value) {\n                    usernameField.value = credentials.username;\n                    passwordField.value = credentials.password;\n                    \n                    // 触发事件\n                    this.triggerInputEvents(usernameField);\n                    this.triggerInputEvents(passwordField);\n                    \n                    console.log('自动填充完成');\n                    filled = true;\n                    \n                    // 显示填充提示\n                    this.showAutoFillNotification();\n                }\n                break;\n            }\n        }\n        \n        return filled;\n    }\n    \n    // 自动提交登录表单\n    autoSubmitForm() {\n        if (this.reloginAttempts >= this.maxReloginAttempts) {\n            console.log('已达到最大自动重新登录尝试次数');\n            return false;\n        }\n        \n        const forms = document.querySelectorAll('form');\n        for (let form of forms) {\n            const passwordField = form.querySelector('input[type=\"password\"]');\n            if (!passwordField) continue;\n            \n            // 查找提交按钮\n            const submitButton = form.querySelector('input[type=\"submit\"], button[type=\"submit\"], button:not([type])');\n            \n            if (submitButton) {\n                console.log('尝试自动重新登录');\n                this.reloginAttempts++;\n                \n                // 触发点击事件（更自然的方式）\n                submitButton.click();\n                return true;\n            } else {\n                // 如果没有找到提交按钮，直接提交表单\n                form.submit();\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    findUsernameField(form) {\n        const selectors = [\n            'input[name=\"username\"]',\n            'input[name=\"email\"]',\n            'input[name=\"user\"]',\n            'input[name=\"login\"]',\n            'input[type=\"text\"]',\n            'input[type=\"email\"]'\n        ];\n        \n        for (let selector of selectors) {\n            const field = form.querySelector(selector);\n            if (field && field.type !== 'hidden') {\n                return field;\n            }\n        }\n        return null;\n    }\n    \n    triggerInputEvents(element) {\n        element.dispatchEvent(new Event('input', { bubbles: true }));\n        element.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    showAutoFillNotification() {\n        const notification = document.createElement('div');\n        notification.textContent = '🔐 已自动填充登录信息';\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #2196F3;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 4px;\n            z-index: 10000;\n            font-family: Arial, sans-serif;\n            font-size: 14px;\n        `;\n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            if (document.body.contains(notification)) {\n                document.body.removeChild(notification);\n            }\n        }, 3000);\n    }\n    \n    // 会话监控和掉线检测\n    startSessionMonitoring() {\n        if (!this.autoReloginEnabled) return;\n        \n        // 定期检查登录状态\n        setInterval(() => {\n            this.checkLoginStatus();\n        }, 30000); // 每30秒检查一次\n        \n        // 监听页面跳转和错误\n        window.addEventListener('beforeunload', () => {\n            this.reloginAttempts = 0; // 重置尝试次数\n        });\n        \n        // 监听网络状态\n        window.addEventListener('online', () => {\n            // 网络恢复时检查登录状态\n            setTimeout(() => this.checkLoginStatus(), 2000);\n        });\n    }\n    \n    // 检查登录状态\n    async checkLoginStatus() {\n        if (!this.autoReloginEnabled || !this.isEnabled) return;\n        \n        // 检查当前是否在登录页面\n        const isLoginPage = document.querySelector('input[type=\"password\"]') && \n                           (document.querySelector('input[type=\"text\"]') || \n                            document.querySelector('input[type=\"email\"]'));\n        \n        if (isLoginPage) {\n            // 如果在登录页面，检查是否有保存的凭据\n            const credentials = this.getCredentials();\n            if (credentials) {\n                console.log('检测到登录页面，尝试自动重新登录');\n                \n                // 先填充表单\n                const filled = this.fillForm(credentials);\n                if (filled) {\n                    // 等待一下然后自动提交\n                    setTimeout(() => {\n                        this.autoSubmitForm();\n                    }, 1000);\n                }\n            }\n        } else {\n            // 如果不在登录页面，检查是否有登录状态失效的迹象\n            this.detectLogoutIndicators();\n        }\n    }\n    \n    // 检测登出指示器\n    detectLogoutIndicators() {\n        // 常见的登出指示器：\n        \n        // 1. 页面包含登录相关的文字提示\n        const logoutTextIndicators = [\n            '请登录', '登录', 'sign in', 'login',\n            '会话已过期', 'session expired',\n            '请重新登录', '请重新输入密码',\n            '未登录', '未认证', '认证失败'\n        ];\n        \n        const pageText = document.body.innerText.toLowerCase();\n        for (let indicator of logoutTextIndicators) {\n            if (pageText.includes(indicator.toLowerCase())) {\n                console.log('检测到登出指示器:', indicator);\n                this.handleLogoutDetection();\n                return;\n            }\n        }\n        \n        // 2. URL中包含登录相关路径\n        const loginPaths = ['/login', '/signin', '/auth', '/authenticate'];\n        const currentPath = window.location.pathname.toLowerCase();\n        for (let path of loginPaths) {\n            if (currentPath.includes(path)) {\n                console.log('检测到登录路径:', path);\n                this.handleLogoutDetection();\n                return;\n            }\n        }\n        \n        // 3. 检查是否有登录表单\n        const loginForm = document.querySelector('form input[type=\"password\"]');\n        if (loginForm && window.location.pathname !== '/') {\n            console.log('检测到非首页的登录表单');\n            this.handleLogoutDetection();\n        }\n    }\n    \n    // 处理登出检测\n    handleLogoutDetection() {\n        if (this.reloginAttempts >= this.maxReloginAttempts) {\n            console.log('已达到最大重新登录尝试次数，停止自动重新登录');\n            return;\n        }\n        \n        const credentials = this.getCredentials();\n        if (!credentials) {\n            console.log('没有保存的凭据，无法自动重新登录');\n            return;\n        }\n        \n        console.log('尝试自动重新登录');\n        \n        // 填充并提交登录表单\n        const filled = this.fillForm(credentials);\n        if (filled) {\n            setTimeout(() => {\n                const submitted = this.autoSubmitForm();\n                if (submitted) {\n                    this.showReloginNotification();\n                }\n            }, 1500);\n        }\n    }\n    \n    showReloginNotification() {\n        const notification = document.createElement('div');\n        notification.innerHTML = '🔄 检测到登录状态失效，正在自动重新登录...';\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #FF9800;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 4px;\n            z-index: 10000;\n            font-family: Arial, sans-serif;\n            font-size: 14px;\n        `;\n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            if (document.body.contains(notification)) {\n                document.body.removeChild(notification);\n            }\n        }, 5000);\n    }\n    \n    // 提供管理接口\n    enableAutoRelogin() {\n        this.autoReloginEnabled = true;\n        localStorage.setItem('autoReloginEnabled', 'true');\n        this.startSessionMonitoring();\n    }\n    \n    disableAutoRelogin() {\n        this.autoReloginEnabled = false;\n        localStorage.setItem('autoReloginEnabled', 'false');\n    }\n}\n\n// 初始化密码管理器\nconst passwordManager = new PasswordManager();\n\n// 改进的表单提交处理\nconst handleFormSubmit = (e) => {\n    const form = e.target;\n    \n    // 查找密码字段\n    const passwordField = form.querySelector('input[type=\"password\"]');\n    if (!passwordField) return;\n    \n    const password = passwordField.value;\n    if (!password) return;\n    \n    // 查找用户名字段\n    const usernameField = passwordManager.findUsernameField(form);\n    if (!usernameField) return;\n    \n    const username = usernameField.value;\n    if (!username) return;\n    \n    // 检查是否已经保存过\n    const existing = passwordManager.getCredentials();\n    const isNew = !existing || existing.username !== username;\n    \n    if (isNew && passwordManager.isEnabled) {\n        // 延迟询问，避免干扰表单提交\n        setTimeout(() => {\n            if (confirm('是否保存此登录信息？')) {\n                passwordManager.saveCredentials(username, password);\n                \n                // 询问是否启用自动重新登录\n                if (!localStorage.getItem('autoReloginEnabled')) {\n                    const enableRelogin = confirm('是否启用自动重新登录功能？\\n当检测到登录状态失效时，会自动尝试重新登录。');\n                    if (enableRelogin) {\n                        passwordManager.enableAutoRelogin();\n                    }\n                }\n            }\n        }, 100);\n    }\n};\n\n// 事件监听 - 使用更安全的方式\nlet isClickHandlerAttached = false;\nlet isSubmitHandlerAttached = false;\n\nfunction attachEventListeners() {\n    if (!isClickHandlerAttached) {\n        document.addEventListener('click', hookClick, { capture: true });\n        isClickHandlerAttached = true;\n    }\n    \n    if (!isSubmitHandlerAttached) {\n        document.addEventListener('submit', handleFormSubmit, true);\n        isSubmitHandlerAttached = true;\n    }\n}\n\n// 安全的自动填充\nwindow.addEventListener('DOMContentLoaded', () => {\n    attachEventListeners();\n    passwordManager.safeAutoFill();\n});\n\n// 处理动态加载的内容\nconst observer = new MutationObserver(() => {\n    passwordManager.safeAutoFill();\n});\n\nobserver.observe(document.body, {\n    childList: true,\n    subtree: true\n});\n\n// 提供管理接口\nwindow.passwordManager = {\n    clear: () => passwordManager.clearCredentials(),\n    disable: () => {\n        passwordManager.isEnabled = false;\n        localStorage.setItem('passwordManagerEnabled', 'false');\n    },\n    enable: () => {\n        passwordManager.isEnabled = true;\n        localStorage.setItem('passwordManagerEnabled', 'true');\n    },\n    enableAutoRelogin: () => passwordManager.enableAutoRelogin(),\n    disableAutoRelogin: () => passwordManager.disableAutoRelogin(),\n    getStatus: () => ({\n        enabled: passwordManager.isEnabled,\n        autoRelogin: passwordManager.autoReloginEnabled,\n        hasCredentials: !!passwordManager.getCredentials()\n    })\n};\n\nconsole.log('密码管理器已加载，输入 passwordManager.getStatus() 查看状态');","isHtml":false,"htmlPath":"","htmlFiles":[],"prefix":"","pcRepo":"PakePlus-v212","iosRepo":"PakePlus-iOS-v212","androidRepo":"PakePlus-Android-v212","more":{"windows":{"label":"","title":"随行校园","url":"https://epay.hnuu.edu.cn/member/wxIndex","userAgent":"Mozilla/5.0 (Linux; Android 14; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Mobile Safari/537.36","width":412,"height":915,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"shadow":true,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false,"backgroundColor":null,"backgroundThrottling":null,"javascriptDisabled":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"eeadbbaeadadd","showName":"随行校园","version":"0.3.0","webUrl":"https://epay.hnuu.edu.cn/member/wxIndex","id":"com.eeadbbaeadadd.app.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false,"safeArea":"all"},"android":{"name":"eeadbbaeadadd","showName":"随行校园","version":"0.3.0","webUrl":"https://epay.hnuu.edu.cn/member/wxIndex","id":"com.eeadbbaeadadd.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false,"safeArea":"all"},"desktop":{"name":"eeadbbaeadadd","showName":"随行校园","version":"0.3.0","id":"com.eeadbbaeadadd.app.desktop","desc":"","webUrl":"https://epay.hnuu.edu.cn/member/wxIndex","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"buildMethod":"cloud","debug":true}}